pipeline {
  agent any
  parameters {
    string(name: 'TEST_IP', defaultValue: '', description: 'IP of the test server')
  }
  stages {
    stage('Install Docker via Ansible') {
      steps {
        sh """
          ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R "${params.TEST_IP}" || true

          mkdir -p playbooks
          cat > playbooks/install_docker.yml <<'YML'
---
- hosts: all
  become: yes
  tasks:
    - name: Update apt cache
      apt: update_cache=yes
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker repo
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        update_cache: yes
        state: present
    - name: Add jenkins to docker group
      user:
        name: jenkins
        groups: docker
        append: yes
YML

          echo "[test]" > inventory.ini
          echo "${params.TEST_IP} ansible_user=jenkins ansible_ssh_private_key_file=/var/lib/jenkins/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3 ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini

          ansible-playbook -i inventory.ini playbooks/install_docker.yml --private-key /var/lib/jenkins/.ssh/id_rsa -u jenkins
        """
      }
    }
  }
  post {
    success {
      echo "Triggering Job 3: Build & Deploy PHP Docker Container"
      build job: 'Job3-Build-deploy-php', wait: false, parameters: [
        string(name: 'TEST_IP', value: params.TEST_IP)
      ]
    }
    failure {
        echo "Job2 failed, cleaning container..."
        build job: 'Job4-Cleanup-Container-on-Failure',
                 parameters: [string(name: 'TEST_IP', value: params.TEST_IP)]
    }
  }
}
